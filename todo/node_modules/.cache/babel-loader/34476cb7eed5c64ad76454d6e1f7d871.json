{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { ulid } from \"ulid\";\nimport * as todoData from \"../api/todo\";\nexport const useTodo = () => {\n  _s();\n\n  const [todoList, setTodoList] = useState([]);\n  useEffect(() => {\n    todoData.getAllTodosData().then(todo => {\n      setTodoList([...todo].reverse());\n    });\n  }, []);\n\n  const toggleTodoListItemStatus = (id, done) => {\n    const todoItem = todoList.find(item => item.id === id);\n    const newTodoItem = { ...todoItem,\n      done: \"done\"\n    };\n    todoData.updateTodoData(id, newTodoItem).then(updatedTodo => {\n      const newTodoList = todoList.map(item => item.id !== updatedTodo.id ? item : updatedTodo);\n      setTodoList(newTodoList);\n    });\n  };\n\n  const addTodoListItem = todoContent => {\n    const newTodoItem = {\n      content: todoContent,\n      id: ulid(),\n      done: false\n    };\n    return todoData.addTodoData(newTodoItem).then(addTodo => {\n      setTodoList([addTodo, ...todoList]);\n    });\n  };\n\n  const deleteTodoListItem = id => {\n    todoData.deleteTodoData(id).then(deleteListItemId => {\n      const newTodoList = todoList.filter(item => item.id !== deleteListItemId);\n      setTodoList(newTodoList);\n    });\n  };\n\n  return {\n    todoList,\n    toggleTodoListItemStatus,\n    addTodoListItem,\n    deleteTodoListItem\n  };\n};\n\n_s(useTodo, \"hGGsNTuaOn7oyphipNa0xsYj1Yc=\");","map":{"version":3,"sources":["C:/Users/daisu/git-manage/react/todo/src/hooks/useTodo.js"],"names":["useState","useEffect","ulid","todoData","useTodo","todoList","setTodoList","getAllTodosData","then","todo","reverse","toggleTodoListItemStatus","id","done","todoItem","find","item","newTodoItem","updateTodoData","updatedTodo","newTodoList","map","addTodoListItem","todoContent","content","addTodoData","addTodo","deleteTodoListItem","deleteTodoData","deleteListItemId","filter"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,CAACI,eAAT,GAA2BC,IAA3B,CAAiCC,IAAD,IAAU;AACxCH,MAAAA,WAAW,CAAC,CAAC,GAAGG,IAAJ,EAAUC,OAAV,EAAD,CAAX;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,wBAAwB,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC7C,UAAMC,QAAQ,GAAGT,QAAQ,CAACU,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYA,EAApC,CAAjB;AACA,UAAMK,WAAW,GAAG,EAAC,GAAGH,QAAJ;AAAcD,MAAAA,IAAI,EAAE;AAApB,KAApB;AAEAV,IAAAA,QAAQ,CAACe,cAAT,CAAwBN,EAAxB,EAA4BK,WAA5B,EAAyCT,IAAzC,CAA+CW,WAAD,IAAiB;AAC7D,YAAMC,WAAW,GAAGf,QAAQ,CAACgB,GAAT,CAAcL,IAAD,IAC/BA,IAAI,CAACJ,EAAL,KAAYO,WAAW,CAACP,EAAxB,GAA6BI,IAA7B,GAAoCG,WADlB,CAApB;AAIAb,MAAAA,WAAW,CAACc,WAAD,CAAX;AACD,KAND;AAOD,GAXD;;AAaA,QAAME,eAAe,GAAIC,WAAD,IAAiB;AACvC,UAAMN,WAAW,GAAG;AAClBO,MAAAA,OAAO,EAAED,WADS;AAElBX,MAAAA,EAAE,EAAEV,IAAI,EAFU;AAGlBW,MAAAA,IAAI,EAAE;AAHY,KAApB;AAKA,WAAOV,QAAQ,CAACsB,WAAT,CAAqBR,WAArB,EAAkCT,IAAlC,CAAwCkB,OAAD,IAAa;AACzDpB,MAAAA,WAAW,CAAC,CAACoB,OAAD,EAAU,GAAGrB,QAAb,CAAD,CAAX;AACD,KAFM,CAAP;AAGD,GATD;;AAWA,QAAMsB,kBAAkB,GAAIf,EAAD,IAAQ;AACjCT,IAAAA,QAAQ,CAACyB,cAAT,CAAwBhB,EAAxB,EAA4BJ,IAA5B,CAAkCqB,gBAAD,IAAsB;AACrD,YAAMT,WAAW,GAAGf,QAAQ,CAACyB,MAAT,CACjBd,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYiB,gBADJ,CAApB;AAGAvB,MAAAA,WAAW,CAACc,WAAD,CAAX;AACD,KALD;AAMD,GAPD;;AASA,SAAO;AACLf,IAAAA,QADK;AAELM,IAAAA,wBAFK;AAGLW,IAAAA,eAHK;AAILK,IAAAA;AAJK,GAAP;AAMD,CAhDM;;GAAMvB,O","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { ulid } from \"ulid\";\r\nimport * as todoData from \"../api/todo\";\r\n\r\nexport const useTodo = () => {\r\n  const [todoList, setTodoList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    todoData.getAllTodosData().then((todo) => {\r\n      setTodoList([...todo].reverse());\r\n    });\r\n  }, []);\r\n\r\n  const toggleTodoListItemStatus = (id, done) => {\r\n    const todoItem = todoList.find((item) => item.id === id);\r\n    const newTodoItem = {...todoItem, done: \"done\"};\r\n\r\n    todoData.updateTodoData(id, newTodoItem).then((updatedTodo) => {\r\n      const newTodoList = todoList.map((item) => \r\n        item.id !== updatedTodo.id ? item : updatedTodo\r\n      );\r\n\r\n      setTodoList(newTodoList);\r\n    });\r\n  };\r\n\r\n  const addTodoListItem = (todoContent) => {\r\n    const newTodoItem = {\r\n      content: todoContent,\r\n      id: ulid(),\r\n      done: false\r\n    };\r\n    return todoData.addTodoData(newTodoItem).then((addTodo) => {\r\n      setTodoList([addTodo, ...todoList]);\r\n    });\r\n  };\r\n\r\n  const deleteTodoListItem = (id) => {\r\n    todoData.deleteTodoData(id).then((deleteListItemId) => {\r\n      const newTodoList = todoList.filter(\r\n        (item) => item.id !== deleteListItemId\r\n      );\r\n      setTodoList(newTodoList);\r\n    });\r\n  };\r\n\r\n  return {\r\n    todoList,\r\n    toggleTodoListItemStatus,\r\n    addTodoListItem,\r\n    deleteTodoListItem\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}